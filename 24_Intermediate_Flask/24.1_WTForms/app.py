"""
NOTES:
Goals of Flask Forms:
    -Write the HTML
    -Write server-side validation code
    -Add Logic for the form to show validation methods
    -Add protection against security attacks

Flask WTF

CSRF (cross-site-request-forgery): guarantees our form is from our server
-like a token to make sure bad actors don't manipulate users
-generated by the server when a form is shown
-included in the html of the form
-checked by server on form submission
-hidden field
-need to hide token in html, but want it to be part of the html
-need to validate it on server side

NOTE FOR TESTING POST REQUESTS FOR WTFORMS
WE MUST DISABLE CSRF CHECKING IN TESTS:
app.config['WTF_CSRF_ENABLED'] = False

"""

from flask import Flask, request, render_template,  redirect, flash, session
# from flask_debugtoolbar import DebugToolbarExtension
from models import db,  connect_db, Department, Employee
from forms import AddSnackForm, EmployeeForm

app = Flask(__name__)

app.config['SQLALCHEMY_DATABASE_URI'] = 'postgresql:///employees_db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['SQLALCHEMY_ECHO'] = True
app.config['SECRET_KEY'] = "chickenzarecool21837"
app.config['DEBUG_TB_INTERCEPT_REDIRECTS'] = False


connect_db(app)


@app.route("/")
def homepage():
    """Show homepage links."""

    return render_template("home.html")

@app.route('/snacks/new', methods=['GET', 'POST'])
def add_snack():
    print(request.form)
    form = AddSnackForm()
    if form.validate_on_submit():
        # is this a post req and is this a valid token
        name = form.name.data
        price = form.price.data
        flash(f"Created new snack: name is {name}, price is ${price}")
        
        return redirect('/')
    else:
        return render_template("add_snack_form.html", form=form)

@app.route('/phones')
def list_phones():
    """Renders directory of employees and phone numbers  (from dept)"""
    emps = Employee.query.all()
    return render_template('phones.html', emps=emps)

@app.route('/employees/new', methods=["GET", "POST"])
def add_employee():
    form = EmployeeForm()
    depts = [(d.dept_code, d.dept_name) for d in Department.query.all()]
    form.dept_code.choices = depts
    if form.validate_on_submit():
        name = form.name.data
        state = form.state.data
        dept_code = form.dept_code.data

        emp = Employee(name=name, state=state, dept_code=dept_code)
        db.session.add(emp)
        db.session.commit()
        return redirect('/phones')
    else:
        return render_template('add_employee_form.html', form=form)

@app.route('/employees/<int:emp_id>/edit', methods=['GET', 'POST'])
def edit_employee(emp_id):
    emp = Employee.query.get_or_404(emp_id)
    form = EmployeeForm(obj=emp)
    depts = [(d.dept_code, d.dept_name) for d in Department.query.all()]
    form.dept_code.choices = depts
    if form.validate_on_submit():
        emp.name = form.name.data
        emp.state = form.state.data
        emp.dept_code = form.dept_code.data

        # db.session.add(emp)
        db.session.commit()
        return redirect('/phones')
    else:
        return render_template('edit_employee_form.html', form=form)

# @app.route("/add", methods=["GET", "POST"])
# def add_snack():
#     """Snack add form; handle adding."""

#     form = AddSnackForm()

#     if form.validate_on_submit():
#         name = form.name.data
#         price = form.price.data
#         flash(f"Added {name} at {price}")
#         return redirect("/add")

#     else:
#         return render_template(
#             "snack_add_form.html", form=form)


# @app.route("/users/<int:uid>/edit", methods=["GET", "POST"])
# def edit_user(uid):
#     """Show user edit form and handle edit."""

#     user = User.query.get_or_404(uid)
#     form = UserForm(obj=user)

#     if form.validate_on_submit():
#         user.name = form.name.data
#         user.email = form.email.data
#         db.session.commit()
#         flash(f"User {uid} updated!")
#         return redirect(f"/users/{uid}/edit")

#     else:
#         return render_template("user_form.html", form=form)
