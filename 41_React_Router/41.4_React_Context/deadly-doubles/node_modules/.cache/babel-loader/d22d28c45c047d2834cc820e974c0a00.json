{"ast":null,"code":"var _jsxFileName = \"/Users/brycebeckenbach/Desktop/Programming_Projects/Springboard/41_React_Router/41.4_React_Context/deadly-doubles/src/Table.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport \"./Table.css\";\n/** Table at a casino.\n *\n * Each table plays a game (Deadly Doubles, Psychic Dice, etc)\n *\n * This is a generic class --- it wraps the specific game with the ability\n * to keep track of wins/losses, and shows all the \"sets\" of the game (ie,\n * each individual hand of the game).\n *\n * Props:\n * - there *could* be props, but the class is agnostic about it. Whatever\n *   props it receives, it passes to the underlying game.\n *\n * State:\n * - gameStates: array of [\"won\", \"won\", \"lost\", ...] for already-decided sets\n *\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Table(props) {\n  _s();\n\n  const [gameStates, setGameStates] = useState([]);\n\n  function addWin() {\n    setGameStates(states => [...states, \"won\"]);\n  }\n\n  function addLoss() {\n    setGameStates(states => [...states, \"lost\"]);\n  }\n\n  const wins = gameStates.filter(st => st === \"won\").length;\n  const losses = gameStates.length - wins;\n  /** render \"sets\" of the game, along with win/loss summary */\n  // get list of already-won/lost sets [if any]\n\n  let sets = gameStates.map((gs, idx) => /*#__PURE__*/_jsxDEV(props.game, {\n    gameState: gs,\n    ...props\n  }, idx, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this)); // add new set\n\n  sets.push( /*#__PURE__*/_jsxDEV(props.game, {\n    addWin: addWin,\n    addLoss: addLoss,\n    ...props\n  }, sets.length, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Table\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: props.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: /*#__PURE__*/_jsxDEV(\"i\", {\n        children: props.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Wins: \", wins, \" \\u2014 Losses: \", losses]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), sets.reverse()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Table, \"J7kEEKpPEPfrnF1kakcv8lbN8EU=\");\n\n_c = Table;\nexport default Table;\n\nvar _c;\n\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"sources":["/Users/brycebeckenbach/Desktop/Programming_Projects/Springboard/41_React_Router/41.4_React_Context/deadly-doubles/src/Table.js"],"names":["React","useState","Table","props","gameStates","setGameStates","addWin","states","addLoss","wins","filter","st","length","losses","sets","map","gs","idx","push","title","description","reverse"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,aAAP;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAEA,SAASC,KAAT,CAAeC,KAAf,EAAsB;AAAA;;AACpB,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BJ,QAAQ,CAAC,EAAD,CAA5C;;AACA,WAASK,MAAT,GAAkB;AAChBD,IAAAA,aAAa,CAACE,MAAM,IAAI,CAAC,GAAGA,MAAJ,EAAY,KAAZ,CAAX,CAAb;AACD;;AACD,WAASC,OAAT,GAAmB;AACjBH,IAAAA,aAAa,CAACE,MAAM,IAAI,CAAC,GAAGA,MAAJ,EAAY,MAAZ,CAAX,CAAb;AACD;;AACD,QAAME,IAAI,GAAGL,UAAU,CAACM,MAAX,CAAkBC,EAAE,IAAIA,EAAE,KAAK,KAA/B,EAAsCC,MAAnD;AACA,QAAMC,MAAM,GAAGT,UAAU,CAACQ,MAAX,GAAoBH,IAAnC;AAEA;AAEA;;AACA,MAAIK,IAAI,GAAGV,UAAU,CAACW,GAAX,CAAe,CAACC,EAAD,EAAKC,GAAL,kBACxB,QAAC,KAAD,CAAO,IAAP;AAAsB,IAAA,SAAS,EAAED,EAAjC;AAAA,OAAyCb;AAAzC,KAAiBc,GAAjB;AAAA;AAAA;AAAA;AAAA,UADS,CAAX,CAdoB,CAkBpB;;AACAH,EAAAA,IAAI,CAACI,IAAL,eACE,QAAC,KAAD,CAAO,IAAP;AAEE,IAAA,MAAM,EAAEZ,MAFV;AAGE,IAAA,OAAO,EAAEE,OAHX;AAAA,OAIML;AAJN,KACOW,IAAI,CAACF,MADZ;AAAA;AAAA;AAAA;AAAA,UADF;AASA,sBACE;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA,4BACE;AAAA,gBAAKT,KAAK,CAACgB;AAAX;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,6BACE;AAAA,kBAAIhB,KAAK,CAACiB;AAAV;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAFF,eAKE;AAAA,2BACSX,IADT,sBACgCI,MADhC;AAAA;AAAA;AAAA;AAAA;AAAA,YALF,EAQGC,IAAI,CAACO,OAAL,EARH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD;;GAxCQnB,K;;KAAAA,K;AA0CT,eAAeA,KAAf","sourcesContent":["import React, { useState } from \"react\";\nimport \"./Table.css\";\n\n/** Table at a casino.\n *\n * Each table plays a game (Deadly Doubles, Psychic Dice, etc)\n *\n * This is a generic class --- it wraps the specific game with the ability\n * to keep track of wins/losses, and shows all the \"sets\" of the game (ie,\n * each individual hand of the game).\n *\n * Props:\n * - there *could* be props, but the class is agnostic about it. Whatever\n *   props it receives, it passes to the underlying game.\n *\n * State:\n * - gameStates: array of [\"won\", \"won\", \"lost\", ...] for already-decided sets\n *\n */\n\nfunction Table(props) {\n  const [gameStates, setGameStates] = useState([]);\n  function addWin() {\n    setGameStates(states => [...states, \"won\"]);\n  }\n  function addLoss() {\n    setGameStates(states => [...states, \"lost\"]);\n  }\n  const wins = gameStates.filter(st => st === \"won\").length;\n  const losses = gameStates.length - wins;\n\n  /** render \"sets\" of the game, along with win/loss summary */\n\n  // get list of already-won/lost sets [if any]\n  let sets = gameStates.map((gs, idx) => (\n    <props.game key={idx} gameState={gs} {...props} />\n  ));\n\n  // add new set\n  sets.push(\n    <props.game\n      key={sets.length}\n      addWin={addWin}\n      addLoss={addLoss}\n      {...props}\n    />\n  );\n\n  return (\n    <div className=\"Table\">\n      <h2>{props.title}</h2>\n      <p>\n        <i>{props.description}</i>\n      </p>\n      <p>\n        Wins: {wins} &mdash; Losses: {losses}\n      </p>\n      {sets.reverse()}\n    </div>\n  );\n}\n\nexport default Table;\n"]},"metadata":{},"sourceType":"module"}